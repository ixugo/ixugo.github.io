<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>微服务 on ixugo</title>
        <link>https://blog.golang.space/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
        <description>Recent content in 微服务 on ixugo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 27 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.golang.space/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>单体如何升级到微服务</title>
        <link>https://blog.golang.space/p/%E5%8D%95%E4%BD%93%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
        <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://blog.golang.space/p/%E5%8D%95%E4%BD%93%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
        <description>&lt;img src="http://img.golang.space/shot-1649475285445.png" alt="Featured image of post 单体如何升级到微服务" /&gt;&lt;h2 id=&#34;单体服务的演进过程&#34;&gt;单体服务的演进过程&lt;/h2&gt;
&lt;p&gt;最初业务刚开始&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649475285445.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409113445241&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;上面没有容灾的方案，服务端挂了，就直接挂了。&lt;/p&gt;
&lt;p&gt;当业务有点发展以后，使用 nginx 做负载均衡，横向扩展服务，数据库升级一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649475467512.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409113747387&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在 DNS 上加负载均衡，使用 K8S 管理服务，使用 redis 增加缓存。&lt;/p&gt;
&lt;p&gt;这个架构足以支持大部分初创项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649475524393.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409113844250&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;优点&#34;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发简单&lt;/li&gt;
&lt;li&gt;测试简单&lt;/li&gt;
&lt;li&gt;部署简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺点&#34;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;难以理解和扩展&lt;/li&gt;
&lt;li&gt;小改动也得全量更新&lt;/li&gt;
&lt;li&gt;小问题容易触发大故障&lt;/li&gt;
&lt;li&gt;能够支持的业务规模有限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;微服务&#34;&gt;微服务&lt;/h2&gt;
&lt;p&gt;单体能够承载的业务规模有限，当规模扩大的时候，就需要升级到微服务。&lt;/p&gt;
&lt;p&gt;每个微服务都单独连接一个数据库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649476295397.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409115135266&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;优点-1&#34;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;边界清晰的业务拆分&lt;/li&gt;
&lt;li&gt;易开发，易理解，易维护&lt;/li&gt;
&lt;li&gt;技术栈可相对独立&lt;/li&gt;
&lt;li&gt;持续集成，持续部署更容易&lt;/li&gt;
&lt;li&gt;按需对服务进行治理&lt;/li&gt;
&lt;li&gt;稳定性更容易保障&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺点-1&#34;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;增量了系统复杂度&lt;/li&gt;
&lt;li&gt;数据拆分复杂度&lt;/li&gt;
&lt;li&gt;难调试，难测试&lt;/li&gt;
&lt;li&gt;跨服务修改麻烦&lt;/li&gt;
&lt;li&gt;难部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么信号表明该考虑单体转微服务了&#34;&gt;什么信号表明该考虑单体转微服务了&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;单体系统过度复杂&lt;/li&gt;
&lt;li&gt;当前架构不能满意业务发展需要&lt;/li&gt;
&lt;li&gt;研发效率低下，提交代码冲突&lt;/li&gt;
&lt;li&gt;持续集成，持续交付比较困难，不太敢更新，小版本要等大版本，要死一起死&lt;/li&gt;
&lt;li&gt;团队人员较多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何启动&#34;&gt;如何启动?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;开着飞机换引擎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在转型的过程中，很难零故障的完全转换。&lt;/p&gt;
&lt;p&gt;需要公司或部门领导的支持，要有一个敢于扛责任的领导，在改造期间，要管理好预期收益，实际在转换期间是很难看到成果的。&lt;/p&gt;
&lt;p&gt;建立服务迁移核心团队，需要经验，执行力强，自驱力强的队员。从一个小的服务开始，遇到问题不能跳过，一定要解决，完成这个服务形成最佳实践后，可以推广到整个团队。&lt;/p&gt;
&lt;h2 id=&#34;微服务改造策略&#34;&gt;微服务改造策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由外向内，由边缘到核心&lt;/li&gt;
&lt;li&gt;数据拆分，迁移和验证，可回滚 (要保证当微服务挂掉后，可以回滚到旧的服务)&lt;/li&gt;
&lt;li&gt;fork 请求，proxy 验证&lt;/li&gt;
&lt;li&gt;定期复盘过程，总结可复制套路&lt;/li&gt;
&lt;li&gt;汇报成果，让领导看到收益&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微服务数据库拆分&#34;&gt;微服务数据库拆分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据不能乱，规则先确定&lt;/li&gt;
&lt;li&gt;定义数据边界，避免数据冗余&lt;/li&gt;
&lt;li&gt;数据库互相隔离，避免故障传递&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接口聚类收敛&#34;&gt;接口聚类收敛&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;按功能聚类接口&lt;/li&gt;
&lt;li&gt;避免微服务过微&lt;/li&gt;
&lt;li&gt;避免调用链路过深&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fork-请求&#34;&gt;fork 请求&lt;/h3&gt;
&lt;p&gt;将老的服务上面的请求 fork 到新的服务上，比较结果是否一致。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循序渐进可回滚&lt;/li&gt;
&lt;li&gt;fork 请求，验证正确性&lt;/li&gt;
&lt;li&gt;灰度逐步迁移&lt;/li&gt;
&lt;li&gt;监控有无漏网请求&lt;/li&gt;
&lt;li&gt;保证回滚可能性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649485848221.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409143048080&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;单体到微服务改造案例&#34;&gt;单体到微服务改造案例&lt;/h2&gt;
&lt;p&gt;单体应用，有通知和打卡两个模块，一个 DB 读存数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649486201622.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409143641524&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;第一步，才代码上拆分，服务部署的方式没有改变。只是将 打卡 模块的代码抽出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649486302004.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409143821879&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;第二步，数据库的拆分。依然还是一个单体，但连接两个数据库。&lt;/p&gt;
&lt;p&gt;增加一个 DB 用来存储打开相关内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649486358200.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409143918046&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;第三步，将打卡服务单独部署。承载 fork 的请求，然后比较新旧服务返回的结果是否一致。&lt;/p&gt;
&lt;p&gt;注意同一个 DB 读取没有什么影响，但是写入需要做隔离。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649486461300.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409144101165&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;第四步，通过一段时间的测试，确保服务测试通过后，就可以上线。&lt;/p&gt;
&lt;p&gt;加一个 api_getway，将请求全部发到新服务上。这里要保留旧的服务，如果出现问题，随时回滚。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649486746188.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409144546049&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;第五步，老的服务确实没有流量了，新服务完全稳定了，将老的服务删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649486929760.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409144849611&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/shot-1649487031758.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220409145031606&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1sZ4y1B7iH?spm_id_from=333.788.top_right_bar_window_view_later.content.click&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;七牛云架构师实践课&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
