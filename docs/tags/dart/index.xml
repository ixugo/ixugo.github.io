<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Dart on ixugo</title>
        <link>https://blog.golang.space/tags/dart/</link>
        <description>Recent content in Dart on ixugo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 10 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.golang.space/tags/dart/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Dart 语法基础</title>
        <link>https://blog.golang.space/p/dart-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://blog.golang.space/p/dart-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h1 id=&#34;dart-入门到摔门而去&#34;&gt;Dart 入门到摔门而去&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;一切皆对象, null 都是对象 , 全部继承于 Object&lt;/p&gt;
&lt;h2 id=&#34;概览&#34;&gt;概览&lt;/h2&gt;
&lt;p&gt;Dart 是一门强类型语言, 但是可以使用 var and dynamic , 前者用来自动识别类型, 后者标记为不确定类型 ;&lt;/p&gt;
&lt;p&gt;支持泛型 : &lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;标识符以下划线开头表示私有: &lt;code&gt;_private&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Assert( boolean )&lt;/code&gt;  方法可在开发过程中进行判断, boolean 是 false 时会抛出异常&lt;/p&gt;
&lt;h2 id=&#34;语法基础&#34;&gt;语法基础&lt;/h2&gt;
&lt;h3 id=&#34;1-入口函数&#34;&gt;1. 入口函数&lt;/h3&gt;
&lt;p&gt;程序执行的入口函数, 有且只能有一个  main&lt;/p&gt;
&lt;h3 id=&#34;2-字符串输出方式&#34;&gt;2. 字符串输出方式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;该字符串是  &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 如果是对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;该对象的 xx 字段是  &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xx&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 多行字符串
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;123
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;123
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;123
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;321&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;r&lt;/code&gt; 前缀可以使特殊字符作为普通字符串&lt;/p&gt;
&lt;h3 id=&#34;3-内置类型&#34;&gt;3. 内置类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;numbers&lt;/li&gt;
&lt;li&gt;strings&lt;/li&gt;
&lt;li&gt;booleans&lt;/li&gt;
&lt;li&gt;lists&lt;/li&gt;
&lt;li&gt;sets&lt;/li&gt;
&lt;li&gt;maps&lt;/li&gt;
&lt;li&gt;runes&lt;/li&gt;
&lt;li&gt;symbols&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;numbers 包含 int 和 double&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;31-list&#34;&gt;3.1 list&lt;/h3&gt;
&lt;p&gt;值可以重复, 类型可以不同
使用  &lt;code&gt;list.add()&lt;/code&gt;  添加对象
&lt;code&gt;list.lenght&lt;/code&gt; 获取长度&lt;/p&gt;
&lt;h3 id=&#34;32-set&#34;&gt;3.2 set&lt;/h3&gt;
&lt;p&gt;值不可以重复, 类型必须相同
&lt;code&gt;set.addAll()&lt;/code&gt;  同类型集合添加现有集合&lt;/p&gt;
&lt;h3 id=&#34;33-map&#34;&gt;3.3 map&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;h&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;k&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 添加
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;h&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 取, 如果没有则为 null, git 必须存在
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;4-运算符&#34;&gt;4. 运算符&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;is&lt;/code&gt; 表示判断, &lt;code&gt;as&lt;/code&gt; 表示转换&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// true , 表示 前者是字符串类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// 1, 如果 &amp;#34;1&amp;#34; 是 string 类型正常输出, 否则报错
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 常用在 if+is 判断类型, 使用一个 as 即可完成
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// -&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 如果 emp 为 null,或者不是 UserModel 对象,第一段代码不做任何事, 第二段代码报错
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;??=&lt;/code&gt;  赋值操作符
&lt;code&gt;kk ??= &amp;quot;123&amp;quot;&lt;/code&gt;   如果 kk 为 null, 则 kk = &amp;ldquo;123&amp;rdquo; , 否则 kk=kk, 常用于样式中填充数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;::&lt;/code&gt; 级联符号
通过级联符号可以快速操作同一对象,  &lt;code&gt;emp.name=&amp;quot;123&amp;quot;::age=15::sex=&amp;quot;男&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?.&lt;/code&gt; 条件成员访问符号&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 如果 emp 为空, 则 name 为空 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以上符号组合常用场景&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从 api 获取数据时&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;??=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;用户名&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Valid compile-time constants as of Dart 2.5.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Where i is a const Object with an int value...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Use a typecast.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;i:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Use is and collection if.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ...and a spread.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;5-闭包&#34;&gt;5. 闭包&lt;/h3&gt;
&lt;p&gt;在函数中嵌套匿名函数并返回, 就会形成闭包, 以图片为例, 变量 n 会递增&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;6-类的构造函数&#34;&gt;6 类的构造函数&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510133420016.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510133420016&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;常量对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510133739598.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510133739598&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510134401592.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510134401592&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;61-访问器和存储器---get-set&#34;&gt;6.1 访问器和存储器   get set&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510140210737.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510140210737&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510140241531.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510140241531&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-工厂构造方法&#34;&gt;7 工厂构造方法&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510140933912.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510140933912&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510141122986.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510141122986&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;8-仿真函数&#34;&gt;8 仿真函数&lt;/h3&gt;
&lt;p&gt;让类向方法一样调用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510141456100.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510141456100&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;9-继承&#34;&gt;9 继承&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510142018848.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510142018848&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;方法和变量重写&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510142321937.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510142321937&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;子类重写父类构造方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510142627434.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510142627434&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;-10-抽象类&#34;&gt;### 10 抽象类&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510143131500.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510143131500&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-接口&#34;&gt;11 接口&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510143913774.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510143913774&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510145520381.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510145520381&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-混合&#34;&gt;11 混合&lt;/h3&gt;
&lt;p&gt;被混合的类不能有 显示构造方法 实现多继承的一种方式&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510150004749.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510150004749&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-枚举&#34;&gt;12 枚举&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;13-泛型约束函数&#34;&gt;13 泛型约束函数&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;类泛型&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510153143167.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510153143167&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;异步方法&#34;&gt;异步方法&lt;/h3&gt;
&lt;h4 id=&#34;使用-future&#34;&gt;使用 future&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510161120291.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510161120291&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;使用-async-和-await&#34;&gt;使用 async 和 await&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510160923617.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510160923617&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;多请求并发执行&#34;&gt;多请求并发执行&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510163114722.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510163114722&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;链式请求执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510163255888.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510163255888&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;三种库&#34;&gt;三种库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510163438991.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510163438991&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510163653683.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510163653683&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510163948581.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510163948581&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510164511188.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510164511188&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;流&#34;&gt;流&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510165502007.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510165502007&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;创建一个流控制器, 监听流, 如果发现添加数据, 就输出&lt;/p&gt;
&lt;p&gt;sink 插入&lt;/p&gt;
&lt;p&gt;stream 弹出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/PicGo/image-20200510165349844.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200510165349844&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;值传递与引用传递&#34;&gt;值传递与引用传递&lt;/h3&gt;
&lt;p&gt;基础数据类型都是值传递&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;bool&lt;/li&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对象都是引用传递&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
