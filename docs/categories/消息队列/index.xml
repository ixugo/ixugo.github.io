<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>消息队列 on ixugo</title>
        <link>https://blog.golang.space/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
        <description>Recent content in 消息队列 on ixugo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 10 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.golang.space/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>NSQ</title>
        <link>https://blog.golang.space/p/nsq/</link>
        <pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.golang.space/p/nsq/</guid>
        <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;NSQ 是一个实时分布式消息平台。&lt;/p&gt;
&lt;p&gt;特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持无单点故障的分布式拓扑&lt;/li&gt;
&lt;li&gt;水平可扩展&lt;/li&gt;
&lt;li&gt;低延迟，高性能的消息传递&lt;/li&gt;
&lt;li&gt;负载均衡和消息多播路由&lt;/li&gt;
&lt;li&gt;擅长流式(高吞吐)处理和面向作业(低吞吐)的工作负载&lt;/li&gt;
&lt;li&gt;主要在内存中，超过限制将透明的保存在磁盘上。&lt;/li&gt;
&lt;li&gt;提供消费者查找生产者的服务发现&lt;/li&gt;
&lt;li&gt;等等&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NSQ 主要是内存消息传递平台，默认情况下，消息会在内存中，这也意味着当服务崩溃时会发生丢失，可以通过 &lt;code&gt;--mem-queue-size=0&lt;/code&gt; 来控制将每条消息都持久化到硬盘上。&lt;/li&gt;
&lt;li&gt;消息至少传递一次。这意味着由于各种原因(超时/断开连接/重新排队)，消息可以多次传递。执行幂等操作或重复数据删除是用户的责任。&lt;/li&gt;
&lt;li&gt;收到消息是无序的，不能依赖消息的顺序。&lt;/li&gt;
&lt;li&gt;消费者最终找到所有主题生产者，发现服务被设计最终一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计&#34;&gt;设计&lt;/h2&gt;
&lt;p&gt;单个 nsqd 实例支持同时处理多个数据流，流称为 &amp;ldquo;主题&amp;rdquo;，一个主题有1 个或多个&amp;quot;通道&amp;quot;，每个通道都会主题的所有消息的副本。一个通道通常可以连接多个客户端，假设这些客户端都处于接收消息状态，则消息会随机传递过去。&lt;/p&gt;
&lt;p&gt;首次发布到指定主题时，创建主题，首次订阅指定主题时，创建通道。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.golang.space/img-1694360233845.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;nsqd clients&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;内部设计&#34;&gt;内部设计&lt;/h2&gt;
&lt;p&gt;NSQ 由 3 个守护进程组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nsqd，接收消息，排队消息，传递消息给客户端的进程&lt;/li&gt;
&lt;li&gt;nsqlookupd 管理拓扑信息并提供最终一致的服务发现&lt;/li&gt;
&lt;li&gt;nsqadmin，是一个 Web UI，用于实时检查集群&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://nsq.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NSQ 官方文档&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
