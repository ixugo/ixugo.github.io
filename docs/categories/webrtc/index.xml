<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>WebRTC on ixugo</title>
        <link>https://blog.golang.space/categories/webrtc/</link>
        <description>Recent content in WebRTC on ixugo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 21 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.golang.space/categories/webrtc/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>什么是 WHIP 和 WHEP</title>
        <link>https://blog.golang.space/p/%E4%BB%80%E4%B9%88%E6%98%AF-whip-%E5%92%8C-whep/</link>
        <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.golang.space/p/%E4%BB%80%E4%B9%88%E6%98%AF-whip-%E5%92%8C-whep/</guid>
        <description>&lt;h2 id=&#34;什么是-whip-和-whep-&#34;&gt;什么是 WHIP 和 WHEP ?&lt;/h2&gt;
&lt;p&gt;WHIP 表示 WebRTC-HTTP 入口协议，WHEP 表示 WebRTC-HTTP 出口协议。&lt;/p&gt;
&lt;p&gt;WebRTC 明确决定不适用任何信令协议，以便开发人员能够选择任何现有信令协议。对于流媒体行业来说不是一件好事，大家需要一个众所周知的协议和现成的实现，于是乎产生了 WHIP 和 WHEP。&lt;/p&gt;
&lt;p&gt;在直播例子中，主播将本地媒体传到媒体服务器，就是 WHIP 的用武之地，另一端用户可以在媒体服务器出口端获取流。&lt;/p&gt;
&lt;p&gt;在视频会议中，WebRTC 消除了很多复杂性，对于用户来说可能仅仅是加载网页就能开始会议。&lt;/p&gt;
&lt;p&gt;流媒体行业不同，它依赖 3 个组件，这 3 个组件可能来源于不同的提供者。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;媒体服务器&lt;/li&gt;
&lt;li&gt;媒体源，通常是网络摄像机&lt;/li&gt;
&lt;li&gt;观众&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;WHIP 和 WHEP 正是连接三者的答案，WHIP 将媒体源连接到媒体服务器，WHEP 将媒体服务器连接观众。&lt;/p&gt;
&lt;p&gt;在流媒体行业，WebRTC 可能是临时方案，未来更可能是 &lt;code&gt;WebTransport+WebCodecs+WebAssembly &lt;/code&gt; 的替代方案。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://bloggeek.me/whip-whep-webrtc-live-streaming/#h-what-are-whip-and-whep&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;翻译 WHIP &amp;amp; WHEP: Is WebRTC the future of live streaming?&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
